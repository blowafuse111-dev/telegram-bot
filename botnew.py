import sqlite3
import asyncio
from datetime import datetime, timezone

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ContentType
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# ----------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------
TOKEN = "7512515821:AAGKP4iysC3YfmZ9zje7NS2VstyazOm0dD0"
ADMIN_IDS = [7817856373, 7822572763]
CHANNEL_ID = "-1003157439297"
BANK_CARD = "2204 1201 3108 2352"
BANK_NAME = "–ÆMoney bank"
BOT_NAME = "–£–±–µ–∂–∏—â–µ –•"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ----------------- –ë–ê–ó–ê –î–ê–ù–ù–´–• -----------------
def init_db():
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()

    cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        balance INTEGER DEFAULT 0
    )
    """)

    cur.execute("""
    CREATE TABLE IF NOT EXISTS posts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        text TEXT,
        anon INTEGER,
        status TEXT,
        media_type TEXT,
        media_ids TEXT,
        created_at TEXT
    )
    """)

    cur.execute("""
    CREATE TABLE IF NOT EXISTS payments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount_coins INTEGER,
        price INTEGER,
        status TEXT,
        screenshot TEXT,
        created_at TEXT
    )
    """)

    # –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏ –¥–ª—è "–°–æ–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    cur.execute("""
    CREATE TABLE IF NOT EXISTS delete_requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        message TEXT,
        screenshot TEXT,
        status TEXT,
        created_at TEXT
    )
    """)

    cur.execute("""
    CREATE TABLE IF NOT EXISTS admin_council (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE,
        joined_at TEXT
    )
    """)

    conn.commit()
    conn.close()

def register_user(user_id: int, username: str | None):
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)", (user_id, username))
    # –æ–±–Ω–æ–≤–∏–º username, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
    cur.execute("UPDATE users SET username = ? WHERE id = ? AND (username IS NULL OR username != ?)", (username, user_id, username))
    conn.commit()
    conn.close()

def get_balance(user_id: int) -> int:
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("SELECT balance FROM users WHERE id=?", (user_id,))
    res = cur.fetchone()
    conn.close()
    return res[0] if res else 0

def update_balance(user_id: int, amount: int):
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)", (user_id, None))
    cur.execute("UPDATE users SET balance = balance + ? WHERE id=?", (amount, user_id))
    conn.commit()
    conn.close()

def get_username_from_db(user_id: int) -> str | None:
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("SELECT username FROM users WHERE id=?", (user_id,))
    res = cur.fetchone()
    conn.close()
    return res[0] if res and res[0] else None

def has_joined_council(user_id: int) -> bool:
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM admin_council WHERE user_id=?", (user_id,))
    res = cur.fetchone()
    conn.close()
    return bool(res)

# ----------------- FSM -----------------
class PostState(StatesGroup):
    waiting_for_post = State()

class QuestionState(StatesGroup):
    waiting_for_question = State()
    waiting_for_answer = State()

class BuyCoinsState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_screenshot = State()

class DeletePostState(StatesGroup):
    waiting_for_info = State()

# ----------------- –ö–ù–û–ü–ö–ò -----------------
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç", callback_data="menu_post")],
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="menu_balance")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")]
    ])

def help_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü—Ä–∞–≤–∏–ª–∞", callback_data="help_rules")],
        [InlineKeyboardButton(text="üëª –ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ—Å—Ç?", callback_data="help_anon")],
        [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="help_question")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

def post_choice_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –û—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏", callback_data="post_self")],
        [InlineKeyboardButton(text="üëª –ê–Ω–æ–Ω–∏–º–Ω–æ", callback_data="post_anon")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç (5 Coins)", callback_data="post_delete")],
        [InlineKeyboardButton(text="üèõ –°–æ–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="admin_council")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

def payment_admin_markup(payment_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"payment_approve_{payment_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"payment_reject_{payment_id}")
        ]
    ])

def moderation_markup(post_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"moderate_approve_{post_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"moderate_reject_{post_id}")
        ]
    ])

def delete_request_admin_markup(request_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"del_approve_{request_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"del_reject_{request_id}")
        ]
    ])

def balance_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å Coins", callback_data="balance_buy")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

# ----------------- –°–¢–ê–†–¢ -----------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    register_user(message.from_user.id, message.from_user.username)
    text = (
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {BOT_NAME}!</b>\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≤–∞–ª—é—Ç–æ–π ‚Äî <b>Coins</b>.\n"
        "1 Coin = 50 ‚ÇΩ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
    )
    await message.answer(text, reply_markup=main_menu())

# ----------------- –ú–ï–ù–Æ –ù–ê–ó–ê–î / –ü–û–°–¢ -----------------
@dp.callback_query(F.data == "back_main")
async def back_main(cb: CallbackQuery):
    await cb.message.edit_text(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=main_menu()
    )
    await cb.answer()

@dp.callback_query(F.data == "menu_post")
async def menu_post(cb: CallbackQuery):
    await cb.message.edit_text("üìù –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç?", reply_markup=post_choice_menu())
    await cb.answer()

# ----------------- –°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–ê -----------------
@dp.callback_query(F.data.in_(["post_self", "post_anon"]))
async def post_create(cb: CallbackQuery, state: FSMContext):
    anon = 1 if cb.data == "post_anon" else 0

    # –û–±–Ω–æ–≤–∏–º/–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º username –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    register_user(cb.from_user.id, cb.from_user.username)

    await state.update_data(anon=anon)
    await state.set_state(PostState.waiting_for_post)
    await cb.message.edit_text("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ –º–µ–¥–∏–∞ –¥–ª—è –ø–æ—Å—Ç–∞. (–ú–æ–∂–Ω–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ –ø–æ–¥–ø–∏—Å—å)",
                               reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                   [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_post")]
                               ]))
    await cb.answer()

@dp.message(PostState.waiting_for_post, F.content_type.in_([ContentType.TEXT, ContentType.PHOTO, ContentType.VIDEO]))
async def handle_post(message: Message, state: FSMContext):
    data = await state.get_data()
    anon = data.get("anon", 0)
    created = datetime.now(timezone.utc).isoformat()

    text = message.caption or message.text or ""
    media_type = None
    media_id = None

    if message.photo:
        media_type = "photo"
        media_id = message.photo[-1].file_id
    elif message.video:
        media_type = "video"
        media_id = message.video.file_id

    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO posts (user_id, text, anon, status, media_type, media_ids, created_at) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (message.from_user.id, text, anon, "pending", media_type, media_id, created)
    )
    post_id = cur.lastrowid
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –í–∞—à –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ.")
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: –∏—Å–ø–æ–ª—å–∑—É–µ–º username –∏–∑ message (–Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –º—ã –µ–≥–æ –∑–Ω–∞–µ–º)
    username = message.from_user.username
    pretty_user = f"@{username}" if username else str(message.from_user.id)
    caption_header = f"üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç (ID {post_id})\n–û—Ç: {pretty_user}\n–ê–Ω–æ–Ω–∏–º: {'–î–∞' if anon else '–ù–µ—Ç'}"
    for admin in ADMIN_IDS:
        try:
            if media_type == "photo":
                await bot.send_photo(admin, media_id, caption=f"{caption_header}\n\n{text}", reply_markup=moderation_markup(post_id))
            elif media_type == "video":
                await bot.send_video(admin, media_id, caption=f"{caption_header}\n\n{text}", reply_markup=moderation_markup(post_id))
            else:
                await bot.send_message(admin, f"{caption_header}\n\n{text}", reply_markup=moderation_markup(post_id))
        except Exception:
            # –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º–µ–¥–∏–∞/—Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –∏–∑ –∞–¥–º–∏–Ω–æ–≤
            pass

# ----------------- –ú–û–î–ï–†–ê–¶–ò–Ø –ü–û–°–¢–û–í -----------------
@dp.callback_query(F.data.startswith("moderate_approve_"))
async def moderate_approve(cb: CallbackQuery):
    post_id = int(cb.data.split("_")[-1])
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, text, anon, media_type, media_ids, status FROM posts WHERE id=?", (post_id,))
    post = cur.fetchone()
    if not post:
        await cb.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        conn.close()
        return

    user_id, text, anon, media_type, media_id, status = post
    if status != "pending":
        await cb.answer("–≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        conn.close()
        return

    # –ü–æ–ª—É—á–∏–º username –∏–∑ users (–µ—Å–ª–∏ –µ—Å—Ç—å)
    username = get_username_from_db(user_id)
    if username:
        author_text = f"üë§ @{username}\n\n"
    else:
        # –µ—Å–ª–∏ username –Ω–µ—Ç ‚Äî —É–ø–æ–º—è–Ω–µ–º –ø–æ ID
        author_text = f"üë§ <a href='tg://user?id={user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>\n\n"

    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª —Å —É—á—ë—Ç–æ–º –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
    if anon:
        channel_text = text or ""
    else:
        channel_text = author_text + (text or "")

    try:
        if media_type == "photo":
            await bot.send_photo(CHANNEL_ID, media_id, caption=channel_text)
        elif media_type == "video":
            await bot.send_video(CHANNEL_ID, media_id, caption=channel_text)
        else:
            await bot.send_message(CHANNEL_ID, channel_text)
    except Exception:
        # –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∞
        await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª.", show_alert=True)
        conn.close()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    cur.execute("UPDATE posts SET status='approved' WHERE id=?", (post_id,))
    conn.commit()
    conn.close()

    try:
        await bot.send_message(user_id, "‚úÖ –í–∞—à –ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except:
        pass

    # —É–¥–∞–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    await cb.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω ‚úÖ")

@dp.callback_query(F.data.startswith("moderate_reject_"))
async def moderate_reject(cb: CallbackQuery):
    post_id = int(cb.data.split("_")[-1])
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, status FROM posts WHERE id=?", (post_id,))
    post = cur.fetchone()
    if not post:
        await cb.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        conn.close()
        return

    user_id, status = post
    if status != "pending":
        await cb.answer("–≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        conn.close()
        return

    cur.execute("UPDATE posts SET status='rejected' WHERE id=?", (post_id,))
    conn.commit()
    conn.close()

    try:
        await bot.send_message(user_id, "‚ùå –í–∞—à –ø–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
    except:
        pass

    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    await cb.answer("–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")

# ----------------- –£–î–ê–õ–ï–ù–ò–ï –ü–û–°–¢–ê (–ó–ê 5 COINS) -----------------
@dp.callback_query(F.data == "post_delete")
async def post_delete_start(cb: CallbackQuery, state: FSMContext):
    register_user(cb.from_user.id, cb.from_user.username)
    bal = get_balance(cb.from_user.id)
    cost = 5
    if bal < cost:
        await cb.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.\n\n–ë–∞–ª–∞–Ω—Å: {bal} Coins\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {cost - bal} Coins",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_post")]])
        )
        await cb.answer()
        return

    await state.set_state(DeletePostState.waiting_for_info)
    await cb.message.edit_text(
        "üóë –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∞ –ø–æ–π–¥—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–ø–ª–∞—Ç–∞ (5 Coins) –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_post")]
        ])
    )
    await cb.answer()

@dp.message(DeletePostState.waiting_for_info, F.content_type.in_([ContentType.TEXT, ContentType.PHOTO]))
async def handle_delete_request(message: Message, state: FSMContext):
    # –¢—Ä–µ–±—É–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    register_user(message.from_user.id, message.from_user.username)
    text = message.text or ""
    screenshot = message.photo[-1].file_id if message.photo else None
    created = datetime.now(timezone.utc).isoformat()

    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO delete_requests (user_id, message, screenshot, status, created_at) VALUES (?, ?, ?, ?, ?)",
                (message.from_user.id, text, screenshot, "pending", created))
    rid = cur.lastrowid
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    username = message.from_user.username
    pretty_user = f"@{username}" if username else str(message.from_user.id)
    caption = (
        f"üóë <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {pretty_user}\n"
        f"üÜî ID –∑–∞—è–≤–∫–∏: {rid}\n\n"
        f"{text}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä—É—á–Ω—É—é —É–¥–∞–ª–∏—Ç–µ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ‚úÖ —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–∞—Ç—å 5 Coins, "
        "–∏–ª–∏ ‚ùå —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É."
    )
    for admin in ADMIN_IDS:
        try:
            if screenshot:
                await bot.send_photo(admin, screenshot, caption=caption, reply_markup=delete_request_admin_markup(rid))
            else:
                await bot.send_message(admin, caption, reply_markup=delete_request_admin_markup(rid))
        except:
            pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø–æ –∑–∞—è–≤–∫–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
@dp.callback_query(F.data.startswith("del_approve_"))
async def approve_delete(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    rid = int(cb.data.split("_")[-1])
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, status FROM delete_requests WHERE id=?", (rid,))
    row = cur.fetchone()
    if not row:
        await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        conn.close()
        return
    user_id, status = row
    if status != "pending":
        await cb.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
        conn.close()
        return

    # —Å–ø–∏—Å—ã–≤–∞–µ–º 5 Coins (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º)
    bal = get_balance(user_id)
    cost = 5
    if bal < cost:
        # –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ rejected –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
        cur.execute("UPDATE delete_requests SET status='rejected' WHERE id=?", (rid,))
        conn.commit()
        conn.close()
        try:
            await bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç ‚Äî —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–Ω—É–∂–Ω–æ {cost} Coins).")
        except:
            pass
        try:
            await cb.message.edit_reply_markup(reply_markup=None)
        except:
            pass
        await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ ‚Äî –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        return

    update_balance(user_id, -cost)
    cur.execute("UPDATE delete_requests SET status='approved' WHERE id=?", (rid,))
    conn.commit()
    conn.close()

    try:
        await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –° –≤–∞—Å —Å–ø–∏—Å–∞–Ω–æ 5 Coins.")
    except:
        pass

    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ")

@dp.callback_query(F.data.startswith("del_reject_"))
async def reject_delete(cb: CallbackQuery):
    if cb.from_user.id not in ADMIN_IDS:
        await cb.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    rid = int(cb.data.split("_")[-1])
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, status FROM delete_requests WHERE id=?", (rid,))
    row = cur.fetchone()
    if not row:
        await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        conn.close()
        return
    user_id, status = row
    if status != "pending":
        await cb.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
        conn.close()
        return

    cur.execute("UPDATE delete_requests SET status='rejected' WHERE id=?", (rid,))
    conn.commit()
    conn.close()

    try:
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except:
        pass

    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    await cb.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")

# ----------------- –°–û–í–ï–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ò (–í–°–¢–£–ü–õ–ï–ù–ò–ï –ó–ê 20 COINS) -----------------
@dp.callback_query(F.data == "admin_council")
async def admin_council_info(cb: CallbackQuery):
    text = (
        "üèõ <b>–°–æ–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –£–±–µ–∂–∏—â–∞</b>\n\n"
        "–°–æ–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–±–µ–∂–∏—â–∞ ‚Äî —ç—Ç–æ —Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –≤–µ—Ä—à–∏—Ç—å –¥–µ–ª–∞! "
        "–¢–µ–±–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è ¬´—Å–µ–∫—Ä–µ—Ç–Ω–æ-–Ω–æ–≤—ã–µ¬ª —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤ —Ç–æ–º —á–∏—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ—Å—Ç–∞–º–∏, "
        "—Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç—Ä–∏–≥–∏, –≤–ª–∏—è—Ç—å –Ω–∞ –æ–±—â–µ—Å—Ç–≤–æ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.. –¢–∞–∫–æ–µ, —á—Ç–æ –Ω–∏–∫–æ–º—É –Ω–µ —Å—Ç–æ–∏—Ç –∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º.\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–¥–∞: 20 Coins"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—Å—Ç—É–ø–∏—Ç—å (20 Coins)", callback_data="join_council")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_post")]
    ])
    await cb.message.edit_text(text, reply_markup=markup)
    await cb.answer()

@dp.callback_query(F.data == "join_council")
async def join_council(cb: CallbackQuery):
    user_id = cb.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –≤—Å—Ç—É–ø–∞–ª –ª–∏ —É–∂–µ
    if has_joined_council(user_id):
        await cb.message.edit_text(
            "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –°–æ–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
            "üîó –°—Å—ã–ª–∫–∞: https://t.me/sovet_ubezhishe_bot\n"
            "üß© –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: <code>7351808</code>",
            reply_markup=post_choice_menu()
        )
        await cb.answer("–í—ã —É–∂–µ –≤ –°–æ–≤–µ—Ç–µ.")
        return

    bal = get_balance(user_id)
    cost = 20
    if bal < cost:
        await cb.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è.\n–ë–∞–ª–∞–Ω—Å: {bal} Coins\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {cost - bal} Coins",
            reply_markup=post_choice_menu()
        )
        await cb.answer()
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
    update_balance(user_id, -cost)
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO admin_council (user_id, joined_at) VALUES (?, ?)",
                (user_id, datetime.now(timezone.utc).isoformat()))
    conn.commit()
    conn.close()

    await cb.message.edit_text(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–æ–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\n"
        "–¢–≤–æ—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∑–∞—â–∏—â–µ–Ω–∞ ‚Äî –≤—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –ø–æ–¥ –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–º –Ω–∏–∫–æ–º –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
        "üîó –°—Å—ã–ª–∫–∞: https://t.me/sovet_ubezhishe_bot\n"
        "üß© –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: <code>7351808</code>",
        reply_markup=post_choice_menu()
    )
    await cb.answer("–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ ‚úÖ")

# ----------------- –ü–û–ú–û–©–¨ -----------------
@dp.callback_query(F.data == "menu_help")
async def menu_help(cb: CallbackQuery):
    help_text = "üìñ –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ:"
    await cb.message.edit_text(help_text, reply_markup=help_menu())
    await cb.answer()

@dp.callback_query(F.data == "help_rules")
async def help_rules(cb: CallbackQuery):
    rules_text = (
        "üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –£–±–µ–∂–∏—â–∞</b>\n\n"
        "‚Äî –ë—É–¥—å –¥–æ–±—Ä—ã–º –∏ —É–≤–∞–∂–∞–π –¥—Ä—É–≥–∏—Ö.\n\n"
        "üö´ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>\n"
        "‚Ä¢ –≠–∫—Å—Ç—Ä–µ–º–∏–∑–º, –ø—Ä–∏–∑—ã–≤—ã –∫ –Ω–∞—Å–∏–ª–∏—é, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è.\n"
        "‚Ä¢ –ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è, —Ä–µ–∫–ª–∞–º–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤, –∞–∑–∞—Ä—Ç.\n"
        "‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è."
    )
    await cb.message.edit_text(rules_text, reply_markup=help_menu())
    await cb.answer()

@dp.callback_query(F.data == "help_anon")
async def help_anon(cb: CallbackQuery):
    await cb.message.edit_text(
        "üëª <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ—Å—Ç</b>\n–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è. –ù–∏–∫—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–∑–Ω–∞–µ—Ç –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞.",
        reply_markup=help_menu()
    )
    await cb.answer()

@dp.callback_query(F.data == "help_question")
async def help_question(cb: CallbackQuery, state: FSMContext):
    await state.set_state(QuestionState.waiting_for_question)
    await cb.message.edit_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ‚Äî –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –ª–∏—á–Ω–æ.")
    await cb.answer()

# ----------------- –í–û–ü–†–û–°–´ -----------------
@dp.message(QuestionState.waiting_for_question)
async def send_question(message: Message, state: FSMContext):
    register_user(message.from_user.id, message.from_user.username)
    text = f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç @{message.from_user.username or message.from_user.id}:\n\n{message.text}"
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"answer_question_{message.from_user.id}")]
            ]))
        except:
            pass
    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.clear()

@dp.callback_query(F.data.startswith("answer_question_"))
async def answer_question(cb: CallbackQuery, state: FSMContext):
    # –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª "–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
    user_id = int(cb.data.split("_")[-1])
    await cb.message.answer(f"üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID {user_id}):")
    # —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ FSM –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–¥–º–∏–Ω—É, —á—Ç–æ–±—ã –µ–≥–æ –æ—Ç–≤–µ—Ç —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω—É–∂–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.update_data(reply_to_user=user_id)
    await state.set_state(QuestionState.waiting_for_answer)
    await cb.answer()

@dp.message(QuestionState.waiting_for_answer)
async def send_answer_to_user(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("reply_to_user")
    if not user_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
        return

    try:
        await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await state.clear()

# ----------------- –ë–ê–õ–ê–ù–° / –ü–û–ö–£–ü–ö–ê COINS -----------------
@dp.callback_query(F.data == "menu_balance")
async def menu_balance(cb: CallbackQuery, state: FSMContext):
    register_user(cb.from_user.id, cb.from_user.username)
    bal = get_balance(cb.from_user.id)
    text = f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{bal} Coins</b>"
    await cb.message.edit_text(text, reply_markup=balance_menu())
    await cb.answer()

@dp.callback_query(F.data == "balance_buy")
async def balance_buy(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Coins –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (1 Coin = 50 ‚ÇΩ, –º–∞–∫—Å–∏–º—É–º 100):")
    await state.set_state(BuyCoinsState.waiting_for_amount)
    await cb.answer()

@dp.message(BuyCoinsState.waiting_for_amount)
async def handle_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text.strip())
    except:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")

    if amount < 1 or amount > 100:
        return await message.answer("‚ö†Ô∏è –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –æ—Ç 1 –¥–æ 100 Coins.")

    price = amount * 50
    await state.update_data(amount_coins=amount, price=price)
    await state.set_state(BuyCoinsState.waiting_for_screenshot)

    await message.answer(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞</b>\n\n"
        f"–°—É–º–º–∞: <b>{price} ‚ÇΩ</b>\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{amount} Coins</b>\n\n"
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä—Ç—É:\n<code>{BANK_CARD}</code> ‚Äî {BANK_NAME}\n"
        "–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π @username –∏–ª–∏ ID.\n\n"
        "üì∏ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞."
    )

@dp.message(BuyCoinsState.waiting_for_screenshot, F.photo)
async def handle_screenshot(message: Message, state: FSMContext):
    data = await state.get_data()
    amount = data.get("amount_coins", 0)
    price = data.get("price", 0)
    screenshot_id = message.photo[-1].file_id
    created = datetime.now(timezone.utc).isoformat()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂ –≤ –±–∞–∑–µ
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO payments (user_id, amount_coins, price, status, screenshot, created_at) VALUES (?, ?, ?, ?, ?, ?)",
        (message.from_user.id, amount, price, "pending", screenshot_id, created)
    )
    pid = cur.lastrowid
    conn.commit()
    conn.close()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–∫—Ä–∞—Å–∏–≤–æ–µ)
    markup = payment_admin_markup(pid)
    username = message.from_user.username
    pretty_user = f"@{username}" if username else str(message.from_user.id)
    caption = (
        f"üí∞ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {pretty_user}\n"
        f"üíé Coins: {amount}\n"
        f"üí≥ –°—É–º–º–∞: {price} ‚ÇΩ\n"
        f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {pid}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ ‚úÖ —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞—á–∏—Å–ª–∏—Ç—å Coins, –∏–ª–∏ ‚ùå —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å."
    )
    for admin in ADMIN_IDS:
        try:
            await bot.send_photo(admin, screenshot_id, caption=caption, reply_markup=markup)
        except:
            # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç+—Å—Å—ã–ª–∫—É
            try:
                await bot.send_message(admin, caption, reply_markup=markup)
            except:
                pass

# ----------------- –ê–î–ú–ò–ù: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï/–û–¢–ö–õ–û–ù–ï–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê -----------------
@dp.callback_query(F.data.startswith("payment_approve_"))
async def payment_approve(cb: CallbackQuery):
    pid = int(cb.data.split("_")[-1])
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, amount_coins, status FROM payments WHERE id=?", (pid,))
    payment = cur.fetchone()
    if not payment:
        await cb.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        conn.close()
        return

    user_id, amount, status = payment
    if status != "pending":
        await cb.answer("–≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        conn.close()
        return

    # –ù–∞—á–∏—Å–ª—è–µ–º Coins –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    update_balance(user_id, amount)
    cur.execute("UPDATE payments SET status='approved' WHERE id=?", (pid,))
    conn.commit()
    conn.close()

    try:
        await bot.send_message(user_id, f"‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount} Coins.")
    except:
        pass

    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    await cb.answer("–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ")

@dp.callback_query(F.data.startswith("payment_reject_"))
async def payment_reject(cb: CallbackQuery):
    pid = int(cb.data.split("_")[-1])
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, status FROM payments WHERE id=?", (pid,))
    payment = cur.fetchone()
    if not payment:
        await cb.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        conn.close()
        return

    user_id, status = payment
    if status != "pending":
        await cb.answer("–≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        conn.close()
        return

    cur.execute("UPDATE payments SET status='rejected' WHERE id=?", (pid,))
    conn.commit()
    conn.close()

    try:
        await bot.send_message(user_id, "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    except:
        pass

    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    await cb.answer("–ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")

# ----------------- –ê–î–ú–ò–ù: /addcoin -----------------
@dp.message(Command("addcoin"))
async def add_coin_cmd(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        amount = int(parts[2])
    except (IndexError, ValueError):
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addcoin <user_id> <amount>")

    update_balance(user_id, amount)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} Coins.")
    try:
        await bot.send_message(user_id, f"üíé –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} Coins –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except:
        pass

# ----------------- –ó–ê–ü–£–°–ö -----------------
async def main():
    init_db()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
